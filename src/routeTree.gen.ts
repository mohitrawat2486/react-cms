/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as _authRouteImport } from './routes/__auth'
import { Route as WebConfigIndexRouteImport } from './routes/web-config/index'
import { Route as UsersIndexRouteImport } from './routes/users/index'
import { Route as MenusIndexRouteImport } from './routes/menus/index'
import { Route as FaqsIndexRouteImport } from './routes/faqs/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as BannersIndexRouteImport } from './routes/banners/index'
import { Route as UsersEditRouteImport } from './routes/users/edit'
import { Route as UsersAddRouteImport } from './routes/users/add'
import { Route as MenusAddRouteImport } from './routes/menus/add'
import { Route as BannersAddRouteImport } from './routes/banners/add'
import { Route as authLoginRouteImport } from './routes/(auth)/login'

const _authRoute = _authRouteImport.update({
  id: '/__auth',
  getParentRoute: () => rootRouteImport,
} as any)
const WebConfigIndexRoute = WebConfigIndexRouteImport.update({
  id: '/web-config/',
  path: '/web-config/',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersIndexRoute = UsersIndexRouteImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => rootRouteImport,
} as any)
const MenusIndexRoute = MenusIndexRouteImport.update({
  id: '/menus/',
  path: '/menus/',
  getParentRoute: () => rootRouteImport,
} as any)
const FaqsIndexRoute = FaqsIndexRouteImport.update({
  id: '/faqs/',
  path: '/faqs/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => rootRouteImport,
} as any)
const BannersIndexRoute = BannersIndexRouteImport.update({
  id: '/banners/',
  path: '/banners/',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersEditRoute = UsersEditRouteImport.update({
  id: '/users/edit',
  path: '/users/edit',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersAddRoute = UsersAddRouteImport.update({
  id: '/users/add',
  path: '/users/add',
  getParentRoute: () => rootRouteImport,
} as any)
const MenusAddRoute = MenusAddRouteImport.update({
  id: '/menus/add',
  path: '/menus/add',
  getParentRoute: () => rootRouteImport,
} as any)
const BannersAddRoute = BannersAddRouteImport.update({
  id: '/banners/add',
  path: '/banners/add',
  getParentRoute: () => rootRouteImport,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof authLoginRoute
  '/banners/add': typeof BannersAddRoute
  '/menus/add': typeof MenusAddRoute
  '/users/add': typeof UsersAddRoute
  '/users/edit': typeof UsersEditRoute
  '/banners': typeof BannersIndexRoute
  '/dashboard': typeof DashboardIndexRoute
  '/faqs': typeof FaqsIndexRoute
  '/menus': typeof MenusIndexRoute
  '/users': typeof UsersIndexRoute
  '/web-config': typeof WebConfigIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof authLoginRoute
  '/banners/add': typeof BannersAddRoute
  '/menus/add': typeof MenusAddRoute
  '/users/add': typeof UsersAddRoute
  '/users/edit': typeof UsersEditRoute
  '/banners': typeof BannersIndexRoute
  '/dashboard': typeof DashboardIndexRoute
  '/faqs': typeof FaqsIndexRoute
  '/menus': typeof MenusIndexRoute
  '/users': typeof UsersIndexRoute
  '/web-config': typeof WebConfigIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/__auth': typeof _authRoute
  '/(auth)/login': typeof authLoginRoute
  '/banners/add': typeof BannersAddRoute
  '/menus/add': typeof MenusAddRoute
  '/users/add': typeof UsersAddRoute
  '/users/edit': typeof UsersEditRoute
  '/banners/': typeof BannersIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/faqs/': typeof FaqsIndexRoute
  '/menus/': typeof MenusIndexRoute
  '/users/': typeof UsersIndexRoute
  '/web-config/': typeof WebConfigIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/banners/add'
    | '/menus/add'
    | '/users/add'
    | '/users/edit'
    | '/banners'
    | '/dashboard'
    | '/faqs'
    | '/menus'
    | '/users'
    | '/web-config'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/banners/add'
    | '/menus/add'
    | '/users/add'
    | '/users/edit'
    | '/banners'
    | '/dashboard'
    | '/faqs'
    | '/menus'
    | '/users'
    | '/web-config'
  id:
    | '__root__'
    | '/__auth'
    | '/(auth)/login'
    | '/banners/add'
    | '/menus/add'
    | '/users/add'
    | '/users/edit'
    | '/banners/'
    | '/dashboard/'
    | '/faqs/'
    | '/menus/'
    | '/users/'
    | '/web-config/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  _authRoute: typeof _authRoute
  authLoginRoute: typeof authLoginRoute
  BannersAddRoute: typeof BannersAddRoute
  MenusAddRoute: typeof MenusAddRoute
  UsersAddRoute: typeof UsersAddRoute
  UsersEditRoute: typeof UsersEditRoute
  BannersIndexRoute: typeof BannersIndexRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
  FaqsIndexRoute: typeof FaqsIndexRoute
  MenusIndexRoute: typeof MenusIndexRoute
  UsersIndexRoute: typeof UsersIndexRoute
  WebConfigIndexRoute: typeof WebConfigIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/__auth': {
      id: '/__auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof _authRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/web-config/': {
      id: '/web-config/'
      path: '/web-config'
      fullPath: '/web-config'
      preLoaderRoute: typeof WebConfigIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/': {
      id: '/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/menus/': {
      id: '/menus/'
      path: '/menus'
      fullPath: '/menus'
      preLoaderRoute: typeof MenusIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/faqs/': {
      id: '/faqs/'
      path: '/faqs'
      fullPath: '/faqs'
      preLoaderRoute: typeof FaqsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/banners/': {
      id: '/banners/'
      path: '/banners'
      fullPath: '/banners'
      preLoaderRoute: typeof BannersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/edit': {
      id: '/users/edit'
      path: '/users/edit'
      fullPath: '/users/edit'
      preLoaderRoute: typeof UsersEditRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/add': {
      id: '/users/add'
      path: '/users/add'
      fullPath: '/users/add'
      preLoaderRoute: typeof UsersAddRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/menus/add': {
      id: '/menus/add'
      path: '/menus/add'
      fullPath: '/menus/add'
      preLoaderRoute: typeof MenusAddRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/banners/add': {
      id: '/banners/add'
      path: '/banners/add'
      fullPath: '/banners/add'
      preLoaderRoute: typeof BannersAddRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  _authRoute: _authRoute,
  authLoginRoute: authLoginRoute,
  BannersAddRoute: BannersAddRoute,
  MenusAddRoute: MenusAddRoute,
  UsersAddRoute: UsersAddRoute,
  UsersEditRoute: UsersEditRoute,
  BannersIndexRoute: BannersIndexRoute,
  DashboardIndexRoute: DashboardIndexRoute,
  FaqsIndexRoute: FaqsIndexRoute,
  MenusIndexRoute: MenusIndexRoute,
  UsersIndexRoute: UsersIndexRoute,
  WebConfigIndexRoute: WebConfigIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
